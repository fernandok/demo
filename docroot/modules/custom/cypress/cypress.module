<?php

/**
 * @file
 * Contains cypress.module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cypress_form_node_cy_page_form_alter(&$form, $form_state) {
  _cypress_alter_document_paragraphs($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cypress_form_node_cy_page_edit_form_alter(&$form, $form_state) {
  _cypress_alter_document_paragraphs($form, $form_state);
}

/**
 * Method to alter document paragraph fields behaviour states.
 *
 * @param array $form
 *   Form renderable array.
 * @param array $form_state
 *   Current form state.
 */
function _cypress_alter_document_paragraphs(&$form, $form_state) {
  foreach($form['field_files']['widget'] as $key => &$widget) {
    if (!is_int($key)) {
      continue;
    }
    $subform = &$widget['subform'];
    $file_type_name_attr = "field_files[$key][subform][field_file_type][value]";
    $subform['field_akamai_uri']['#states'] = [
      'invisible' => [
        ':input[name="' . $file_type_name_attr . '"]' => [
          'checked' => FALSE
        ],
      ],
    ];
    $subform['field_akamai_description']['#states'] = [
      'invisible' => [
        ':input[name="' . $file_type_name_attr . '"]' => [
          'checked' => FALSE
        ],
      ],
    ];
    $subform['field_file']['#states'] = [
      'invisible' => [
        ':input[name="' . $file_type_name_attr . '"]' => [
          'checked' => TRUE
        ],
      ],
    ];
  }
}

function cypress_theme($existing, $type, $theme, $path) {
  return [
    'cypress_download_all_docs' => [
      'variables' => [
        'label' => NULL,
        'link' => NULL,
      ],
      'template' => 'cypress-download-all-docs',
    ],
    'cypress_akamai_file_download' => [
      'variables' => [
        'uri' => NULL,
        'description' => NULL,
      ],
      'template' => 'cypress-akamai-file-download',
    ],
    'cypress_ww_cy' => [
      'variables' => [
        'ww' => NULL,
        'cy_price' => NULL,
        'cy_change' => NULL,
      ],
      'template' => 'cypress-ww-cy',
    ],
  ];
}

// to map the first_name, last_name and roles for simplesamlphp
function get_saml_user_attributes($account) {
  $user_act_id =  $account->id();
  $user_object = \Drupal\user\Entity\User::load($user_act_id);
  $saml_attribute = \Drupal::service('simplesamlphp_auth.manager')->getAttributes();
  $saml_role_ids = $saml_attribute['roles'];
  $user_get_roles = $user_object->get('roles')->getValue();
  $user_roles = array(
      '11' => 'administrator',
      '21' => 'cypress_employees',
      '111' => 'all_distributors',
      '116' => 'sales_rep',
  );
  if(empty($user_get_roles)) {
    foreach ($saml_role_ids as $saml_role_id) {
      if ($saml_role_id == 2) {
        continue;
      }
      if (isset($user_roles[$saml_role_id])) {
        $user_object->addRole($user_roles[$saml_role_id]);
      }
    }
  }
  elseif(!empty($user_get_roles)) {
    foreach ($user_get_roles as $user_get_role) {
      if (!in_array($user_get_role['target_id'], $saml_role_ids)) {
        $remove_role = $user_get_role['target_id'];
        $user_object->removeRole($remove_role);
      }
      elseif ($key = array_search($user_get_role['target_id'], $saml_role_ids)) {
        unset($saml_role_ids[$key]);
      }
    }
    foreach ($saml_role_ids as $saml_role_id) {
      if (isset($user_roles[$saml_role_id])) {
        $user_object->addRole($user_roles[$saml_role_id]);
      }
    }
  }
  $user_object->set("field_first_name" ,$saml_attribute['firstName'][0]);
  $user_object->set("field_last_name" ,$saml_attribute['lastName'][0]);
  $user_object->save();
}
