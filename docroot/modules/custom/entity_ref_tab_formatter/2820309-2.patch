diff --git a/docroot/modules/custom/entity_ref_tab_formatter/src/Plugin/Field/FieldFormatter/EnityReferenceTabFormatter.php b/docroot/modules/custom/entity_ref_tab_formatter/src/Plugin/Field/FieldFormatter/EnityReferenceTabFormatter.php
new file mode 100644
index 0000000..4725130
--- /dev/null
+++ b/docroot/modules/custom/entity_ref_tab_formatter/src/Plugin/Field/FieldFormatter/EnityReferenceTabFormatter.php
@@ -0,0 +1,91 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\entity_ref_tab_formatter\Plugin\Field\FieldFormatter\EnityReferenceTabFormatter.
+ */
+
+namespace Drupal\entity_ref_tab_formatter\Plugin\Field\FieldFormatter;
+
+use Drupal\Component\Utility\Html;
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\FormatterBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Plugin implementation of the 'enity_reference_tab_formatter' formatter.
+ *
+ * @FieldFormatter(
+ *   id = "enity_reference_tab_formatter",
+ *   label = @Translation("Enity reference tab formatter"),
+ *   field_types = {
+ *     "entity_reference",
+ *     "entity_reference_revisions"
+ *   }
+ * )
+ */
+class EnityReferenceTabFormatter extends FormatterBase {
+  /**
+   * {@inheritdoc}
+   */
+  public static function defaultSettings() {
+    return array(
+      // Implement default settings.
+    ) + parent::defaultSettings();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsForm(array $form, FormStateInterface $form_state) {
+    // Implements the settings form.
+    $elements['view_mode'] = array(
+      '#type' => 'select',
+      '#options' => array(0,1),
+      '#title' => $this->t('Selet the title field.'),
+      //'#default_value' => $this->getSetting('view_mode'),
+      '#required' => TRUE,
+    );
+    return $elements + parent::settingsForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsSummary() {
+    $summary = [];
+    // Implement settings summary.
+
+    return $summary;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function viewElements(FieldItemListInterface $items, $langcode) {
+    $elements = [];
+
+    foreach ($items as $delta => $item) {
+      $elements[$delta] = ['#markup' => $this->viewValue($item)];
+    }
+
+    return $elements;
+  }
+
+  /**
+   * Generate the output appropriate for one field item.
+   *
+   * @param \Drupal\Core\Field\FieldItemInterface $item
+   *   One field item.
+   *
+   * @return string
+   *   The textual output generated.
+   */
+  protected function viewValue(FieldItemInterface $item) {
+    // The text value has no text format assigned to it, so the user input
+    // should equal the output, including newlines.
+    return nl2br(Html::escape($item->value));
+  }
+
+}
