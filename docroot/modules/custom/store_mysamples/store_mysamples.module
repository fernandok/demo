<?php

/**
 * @file
 * Contains store_mysamples.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Query;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\commerce_promotion\Entity\Promotion;
use Drupal\commerce_promotion\Entity\Coupon;

/**
 * Implements hook_help().
 */
function store_mysamples_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the store_mysamples module.
    case 'help.page.store_mysamples':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('MySamples Integration for Store') . '</p>';
      return $output;

    default:
  }
}

/**
 * Form alter to add additional submit handler.
 *
 * @param array $form
 *   Form array.
 * @param object $form_state
 *   Form state object.
 */
function store_mysamples_form_webform_submission_promocode_form_alter(&$form, $form_state) { //print "fer";exit;
  $current_path = \Drupal::service('path.current')->getPath();
  $elements_to_hide = [
    'approver_mail',
    'custom_emails',
    'requester',
    'approver',
    'discount_amount',
    'promo_code',
    'requester_mail',
    'action_links',
    'approver_subject',
    'requester_subject',
    'approver_mail_statement',
    'requester_mail_statement',
    'add_to_cart_link',
    'mpn_id',
  ];
  if (preg_match('/webform\/manage\/promocode\/submission\/\d+\/edit$/', $current_path)) {
    $promocode_status_value = $form['elements']['promocode_status']['#default_value'];
    if ($promocode_status_value != 'Modify' && $promocode_status_value != '') {
      $form['actions']['submit']['#disabled'] = true;
      $form['actions']['submit']['#suffix'] = 'Promocode is been ' . lcfirst($promocode_status_value) . ', so can\'t been submitted again';
    }
    $op = \Drupal::request()->query->get('op');
    if (!empty($op)) {
      $promocode_status_value = $op;
      $form['#attached']['library'][] = 'store_mysamples/promocode-submission';
    }
    switch ($op) {
      case 'approve':
        $promocode_status_value = 'Approved';
        break;
      case 'reject':
        $promocode_status_value = 'Rejected';
        break;
      case 'modify':
        $promocode_status_value = 'Modify';
        break;
    }
    // $arg  = explode('/',$a);
    $form['elements']['promocode_status']['#default_value'] = $promocode_status_value;

    if ($op == 'modify' || $op == 'Modify') {
      $elements_to_hide[] = 'promocode_status';
    }
    else {
      array_push(
        $elements_to_hide,
        'quantity',
        'customer',
        'end_user',
        'production_date',
        'opportunity_registration',
        'project_name',
        'application',
        'annual_volume',
        'cypress_fae_fse',
        'additional_details',
        'customer_part_number',
        'purchase_order_number',
        'organization'
      );
    }

    $form['actions']['submit']['#submit'][] = 'store_mysamples_send_approval_mail';
  }
  //fern: create a promocode
  else {
    $elements_to_hide[] = 'promocode_status';
    $mpn = \Drupal::request()->query->get('mpn');
    $cat = \Drupal::request()->query->get('cat');
    $sample_status = \Drupal::request()->query->get('sstatus');
    $mpnid = \Drupal::request()->query->get('mpnid');

    // If CAT B check kit or silicon.
    switch ($cat) {
      case 'cat-b':
        $cat = 'cat_b';
        break;
      case 'cat-b-kit':
        $cat = 'cat_b_kit';
        break;
      default:
        $cat = 'cat_a';
        break;
    }


    $form['elements']['mpn_id']['#value'] = $mpnid;
    $form['elements']['type']['#value'] = $cat;
  }
  array_unshift($form['actions']['submit']['#submit'], 'store_mysamples_promocode_submit_form');
  foreach ($elements_to_hide as $element) {
    $form['elements'][$element]['#access'] = FALSE;
  }
}

/**
 * Custom method to get mpnid.
 *
 * @param string $mpn
 *   Marketing part number.
 *
 * @return int
 *   Marketing part number id.
 */
function _get_mpnid($mpn) {
  //$cat = \Drupal::request()->query->get('cat');
  $mpnid = 0;
  $query = \Drupal::database()->query('SELECT
    fmpnid.field_mpnid_value as mpnid
    from node n
    join node__field_mpn fmpn
    on n.nid = fmpn.entity_id
    and n.vid = fmpn.revision_id
    and n.type = \'my_samples\'
    and fmpn.field_mpn_value = :mpn
    join node__field_mpnid fmpnid
    on fmpn.entity_id = fmpnid.entity_id
    and fmpn.revision_id = fmpnid.revision_id', [':mpn' => $mpn]);
  $results = $query->fetchAll();
  foreach ($results as $result) {
    $mpnid = $result->mpnid;
  }
  return $mpnid;
}


/**
 * Additional submit handler to implement promo code logic.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function store_mysamples_promocode_submit_form($form, FormStateInterface $form_state) {

  $form_values = $form_state->getValues();
  $cat = $form_values['type'];
  $approvers = [];
  $discount_amount = 0;
  $promocode = '';
  $msrp = 0;

  $get_mpnid = $form_values['mpn_id'];

  if ($cat == 'cat_a') {
    // todo verified catA approvers.
    // Query to get approver mail for CAT A.
    $query = \Drupal::database()->query('SELECT
        DISTINCT
        case
        when palt.field_primaryapproverleaveto_value >= NOW() and palf.field_primaryapproverleavefrom_value <= NOW()
        then sa.field_shopcodesecondaryapprover_value
        else pa.field_shopcodeprimaryapprover_value
        end as approver
          FROM shope_code_approvers__626119b36b pa
        LEFT JOIN shope_code_approvers__e1d9a69442 palt
        on pa.entity_id = palt.entity_id and pa.revision_id = palt.revision_id
        LEFT JOIN shope_code_approvers__d91892ceeb palf
        on pa.entity_id = palf.entity_id and pa.revision_id = palf.revision_id
        LEFT JOIN shope_code_approvers__e894aeed15 sa
        on pa.entity_id = sa.entity_id and pa.revision_id = sa.revision_id
        LEFT JOIN shope_code_approvers__field_country_id ci
        on pa.entity_id = ci.entity_id and pa.revision_id = ci.revision_id
        WHERE ci.field_country_id_value = :region', [':region' => $form_values['region']]);
    $results = $query->fetchAll();
    foreach ($results as $result) {
      $approvers[] = $result->approver;
    }

    // Query to get mpn details for CAT A.
    // todo mpnid should be from part produt view(reminder).

    $query = \Drupal::database()->select('commerce_product','cp');
    $query->fields('cp',['product_id']);
    $query->join('commerce_product__field_price_one','p1','p1.entity_id = cp.product_id');
    $query->fields('p1',['field_price_one_value']);
    $query->join('commerce_product__field_price_two','p2','p2.entity_id = cp.product_id');
    $query->fields('p2',['field_price_two_value']);
    $query->join('commerce_product__field_price_three','p3','p3.entity_id = cp.product_id');
    $query->fields('p3',['field_price_three_value']);
    $query->join('commerce_product__field_price_four','p4','p4.entity_id = cp.product_id');
    $query->fields('p4',['field_price_four_value']);
    $query->join('commerce_product__field_price_five','p5','p5.entity_id = cp.product_id');
    $query->fields('p5',['field_price_five_value']);
    $query->join('commerce_product__field_price_six','p6','p6.entity_id = cp.product_id');
    $query->fields('p6',['field_price_six_value']);
    $query->join('commerce_product__field_mpn_id','cpmpnid','cpmpnid.entity_id = cp.product_id');
    $query->condition('cpmpnid.field_mpn_id_value',$get_mpnid);
    $results = $query->execute()->fetchAll();

    foreach ($results as $result) {
      $mpn_details = $result;
    }
    // Calculate discount based on quantity.
    if ($form_values['quantity'] <= 9) {
      $discount_price_per_unit = round($mpn_details->field_price_one_value, 2);
    }
    elseif ($form_values['quantity'] >= 10 and $form_values['quantity'] <= 24) {
      $discount_price_per_unit = round($mpn_details->field_price_two_value, 2);
    }
    elseif ($form_values['quantity'] >= 25 and $form_values['quantity'] <= 99) {
      $discount_price_per_unit = round($mpn_details->field_price_three_value, 2);
    }
    elseif ($form_values['quantity'] >= 100 and $form_values['quantity'] <= 249) {
      $discount_price_per_unit = round($mpn_details->field_price_four_value, 2);
    }
    elseif ($form_values['quantity'] >= 250 and $form_values['quantity'] <= 999) {
      $discount_price_per_unit = round($mpn_details->field_price_five_value, 2);
    }
    else {
      $discount_price_per_unit = round($mpn_details->field_price_six_value, 2);
    }
    $msrp = $discount_price_per_unit;
  }
  else {
    // Query to get mpn details for CAT B.
    $query = \Drupal::database()->select('commerce_product', 'cp');
    $query->fields('cp', ['product_id']);
    $query->join('commerce_product__field_mpn_id', 'mpn', 'cp.product_id = mpn.entity_id');
    $query->fields('mpn', ['field_mpn_id_value']);
    $query->join('commerce_product__field_samplemsrp', 'msrp', 'cp.product_id = msrp.entity_id');
    $query->fields('msrp', ['field_samplemsrp_value']);
    $query->leftJoin('commerce_product__field_kit_cost', 'kc', 'cp.product_id = kc.entity_id');
    $query->fields('kc', ['field_kit_cost_value']);
    $query->leftJoin('commerce_product__field_active', 'ac', 'cp.product_id = ac.entity_id');
    $query->fields('ac', ['field_active_value']);
    $query->condition('mpn.field_mpn_id_value', $get_mpnid, '=');
    $query->condition('ac.field_active_value', 1);
    $results = $query->execute()->fetchAll();

    foreach ($results as $result) {
      $mpn_details = $result;
    }

    // todo verified CATB Approvers.
    // Calculate kit amount for CAT B kit.
    if (!empty($form_values['organization'])) {
      $query = \Drupal::database()->query('select
        pa.field_shopcodeprimaryapprover_value as primary_approver,
        sa.field_shopcodesecondaryapprover_value as secondary_approver,
        ta.field_shopcodethirdapprover_value as third_approver,
        ka.field_kitapprover_value
        from shope_code_approvers__field_kitapprover ka
        join shope_code_approvers__626119b36b pa
        on ka.entity_id = pa.entity_id and ka.revision_id = pa.revision_id
        left join shope_code_approvers__e894aeed15 sa
        on ka.entity_id = sa.entity_id and ka.revision_id = sa.revision_id
        left join shope_code_approvers__5d7baf98f6 ta
        on ka.entity_id = ta.entity_id and ka.revision_id = ta.revision_id
        where ka.field_kitapprover_value = :organization', [':organization' => $form_values['organization']]);
      $results = $query->fetchAll();
      foreach ($results as $result) {
        $approvers[] = $result->primary_approver;
        $approvers[] = $result->secondary_approver;
        $approvers[] = $result->third_approver;
      }
      $msrp = $mpn_details->kit_cost;
    }
    
    // Calculate discount amount for CAT B silicon.
    else {
      $query = \Drupal::database()->query('SELECT
        case
        when palt.field_primaryapproverleaveto_value >= NOW() and palf.field_primaryapproverleavefrom_value <= NOW()
        then sa.field_shopcodesecondaryapprover_value
        else pa.field_shopcodeprimaryapprover_value
        end as approver
        FROM shope_code_approvers__626119b36b pa
        LEFT JOIN shope_code_approvers__e1d9a69442 palt
        on pa.entity_id = palt.entity_id and pa.revision_id = palt.revision_id
        LEFT JOIN shope_code_approvers__d91892ceeb palf
        on pa.entity_id = palf.entity_id and pa.revision_id = palf.revision_id
        LEFT JOIN shope_code_approvers__e894aeed15 sa
        on pa.entity_id = sa.entity_id and pa.revision_id = sa.revision_id
        JOIN shope_code_approvers__field_cat_a_b cat
        on pa.entity_id = cat.entity_id and pa.revision_id = cat.revision_id and cat.field_cat_a_b_value = \'B\'
        JOIN shope_code_approvers__field_mpnid mpnid
        on pa.entity_id = mpnid.entity_id and pa.revision_id = mpnid.revision_id
        WHERE mpnid.field_mpnid_value = :mpnid', [':mpnid' => $get_mpnid]);
      $results = $query->fetchAll();
      foreach ($results as $result) {
        $approvers[] = $result->approver;
      }
      $msrp = $mpn_details->sampleMSRP;
    }
  }

  if (empty($approvers)) {
    $approvers[] = '259045696';
  }

  $approver_ids = implode(',', $approvers);

  // Query to get user mail.
  $query = \Drupal::database()->query('select
    u.mail as mail,
    fn.field_first_name_value as first_name,
    ln.field_last_name_value as last_name
    from users_field_data u
    join user__field_legacy_uid luid
    on u.uid = luid.entity_id and luid.field_legacy_uid_value in (' .
    $approver_ids . ')
    join user__field_first_name fn
    on luid.entity_id = fn.entity_id
    join user__field_last_name ln
    on luid.entity_id = ln.entity_id');
  $results = $query->fetchAll();
  $approvers_mail = [];
  $approvers_name = [];
  foreach ($results as $result) {
    $approvers_mail[] = $result->mail;
    $approvers_name[] = $result->mail;
  }
  $discount_amount = $msrp * $form_values['quantity'];
  $current_user = User::load(\Drupal::currentUser()->id());
  $user_name = $current_user->getEmail();

  // Query to get approver divison code.
  $query = \Drupal::database()->select('user__field_division_code','ud');
  $query->fields('ud',['field_division_code_value']);
  $query->join('user__field_legacy_uid','luid','luid.entity_id = ud.entity_id');
  $query->condition('luid.field_legacy_uid_value', $approvers[0]);
  $results = $query->execute()->fetchAll();
  $user_division_code = '';
  foreach ($results as $result) {
    $user_division_code = $result->field_division_code_value;
  }
  // Set the date in email description.
  $expire_date = date('m-d-y', strtotime("+10 days"));

  // Generate promocode.
  if (!isset($form_values['promo_code']) || empty($form_values['promo_code'])) {
    $promocode = $user_division_code . date('y') . date('W') . date('N') . mt_rand(001, 99999);

    // Prepend 'KIT' to promo code, if the item is kits.
    if (!empty($form_values['organization'])) {
      $promocode = 'KIT' . $promocode;
      $form_state->setValue('promo_code', $promocode);
    }
    else {
      $form_state->setValue('promo_code', $promocode);
    }
  }
  $approver_subject = 'Request to Approve Promo Code';
  $requester_subject = 'Request For Promo Code Successfully Sent';
  $action_links = 'width: 32%; display: inline-block; text-align: center;';
  $approver_mail_statement = 'You have a request to approve promo code. ' . $promocode . ' The details of the request are indicated below on this email. Please click on the links below to approve or reject the request. You may also change some of the details of the request by clicking on the modify link.';
  $requester_mail_statement = 'Thank you.Your request for promo code. ' . $promocode . ' has been routed for approval.Please check with the approver on the status of your request.Your promo code will not work until the approver has approved this request.';
  $add_to_cart_link = 'width: 32%; display: inline-block; text-align: center;';
  $approved_second_sentence = '';

  // To get the product_id for Promotions.
  $query = \Drupal::database()->select('commerce_product_field_data', 'cp');
  $query->fields('cp', ['product_id']);
  $query->condition('cp.title', $form_values['part_number']);
  $results = $query->execute()->fetchAll();
  $product_id = $results[0]->product_id;

  switch ($form_values['promocode_status']) {
    case 'Approved':

      // Create custom Promotion for each promocode.
      $promotion_with_coupon = Promotion::create([
        'name' => $form_values['part_number'],
        'order_types' => 'default',
        'stores' => 1,
        'status' => TRUE,
        'offer' => [
          'target_plugin_id' => 'commerce_promotion_product_fixed_off',
          'target_plugin_configuration' => [
            'product_id' => $product_id,
            'amount' => $discount_amount,
          ],
        ],
      ]);
      $promotion_with_coupon->save();
      // Coupon Creation.
      $coupon = Coupon::create([
        'code' => $form_values['promo_code'],
        'usage_limit' => 1,
        'status' => TRUE,
      ]);
      $coupon->save();
      $promotion_with_coupon->get('coupons')->appendItem($coupon);
      $promotion_with_coupon->save();

      $approved_second_sentence = 'Please note that this promo code is set to expire on ' . $expire_date . ' so please make sure to enter your order before then.';

    case 'Rejected':
      $approver_mail_statement = 'Promo code ' . $form_values['promo_code'] . ' has been ' . $form_values['promocode_status'] . $approved_second_sentence;
      $requester_mail_statement = 'Request for ' . $form_values['promo_code'] . ' has been ' . $form_values['promocode_status'];
      $approver_subject = '[' . $form_values['promocode_status'] . '] ' . $approver_subject;
      $requester_subject = '[' . $form_values['promocode_status'] . '] ' . $requester_subject;
      $action_links = 'display: none;';
      drupal_set_message('Promocode is been ' . $form_values['promocode_status']);
      break;

    case 'Modify':
      $approver_subject = '[Modified] ' . $approver_subject;
      $requester_subject = '[Modified] ' . $requester_subject;
      break;
  }
  if (!empty($mpnid)) {
    $form_state->setValue('mpn_id', $mpnid);
  }
  $form_state->setValue('add_to_cart_link', $add_to_cart_link);
  $form_state->setvalue('approver_mail_statement', $approver_mail_statement);
  $form_state->setValue('requester_mail_statement', $requester_mail_statement);
  $form_state->setValue('approver_subject', $approver_subject);
  $form_state->setValue('requester_subject', $requester_subject);
  $form_state->setValue('action_links', $action_links);
  $form_state->setValue('requester', $user_name);
  $form_state->setValue('requester_mail', $current_user->getEmail());
  $form_state->setValue('approver_mail', implode(',', $approvers_mail));
  $form_state->setValue('approver', implode(',', $approvers_name));
  $form_state->setValue('discount_amount', $discount_amount);
  $form_state->setValue('promo_code', $form_values['promo_code']);

}

/**
 * Additional submit handler to send promocode approval/rejection mail.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function store_mysamples_send_approval_mail($form, FormStateInterface $form_state) {
  $form_values = $form_state->getValues();
  if ($form_values['promocode_status'] == 'Approved'
    || $form_values['promocode_status'] == 'Rejected'
    || $form_values['promocode_status'] == 'Modify') {
    $yaml_form_submission = $form_state->getBuildInfo()['callback_object'];
    $yaml_form_submission_entity = $yaml_form_submission->getEntity();
    $yaml_form = $yaml_form_submission_entity->getYamlForm();
    $yaml_form_handlers = $yaml_form->getHandlers();
    $yaml_form_handler_ids = $yaml_form_handlers->getInstanceIds();
    foreach ($yaml_form_handler_ids as $yaml_form_handler_id) {
      $yaml_email_handler = $yaml_form_handlers->get($yaml_form_handler_id);
      $yaml_form_submission_data = $yaml_email_handler->getMessage($yaml_form_submission_entity);
      $yaml_email_handler->sendMessage($yaml_form_submission_data);
    }
  }
}

/**
 * To map the first_name, last_name and roles for simplesamlphp.
 */
function get_saml_user_attributes($account) {
  $user_act_id = $account->id();
  $user_object = User::load($user_act_id);
  $saml_attribute = \Drupal::service('simplesamlphp_auth.manager')->getAttributes();
  $saml_role_ids = $saml_attribute['roles'];
  $saml_mail = $saml_attribute['mail'][0];
  $user_get_roles = $user_object->get('roles')->getValue();
  $user_roles = array(
    '11' => 'administrator',
    '21' => 'cypress_employees',
    '106' => 'mysites',
    '111' => 'all_distributors',
    '116' => 'sales_rep',
  );
  if (empty($user_get_roles)) {
    foreach ($saml_role_ids as $saml_role_id) {
      if ($saml_role_id == 2) {
        continue;
      }
      if (isset($user_roles[$saml_role_id])) {
        $user_object->addRole($user_roles[$saml_role_id]);
      }
    }
  }
  elseif (!empty($user_get_roles)) {
    foreach ($user_get_roles as $user_get_role) {
      if (!in_array($user_get_role['target_id'], $saml_role_ids)) {
        $remove_role = $user_get_role['target_id'];
        $user_object->removeRole($remove_role);
      }
      elseif ($key = array_search($user_get_role['target_id'], $saml_role_ids)) {
        unset($saml_role_ids[$key]);
      }
    }
    foreach ($saml_role_ids as $saml_role_id) {
      if (isset($user_roles[$saml_role_id])) {
        $user_object->addRole($user_roles[$saml_role_id]);
      }
    }
  }
  $sso_legacy_id = $saml_attribute['username'][0];
  $uid = explode('_', $sso_legacy_id);
  $division_code = $uid[0];
  $legacy_user_id = $uid[1];
  $user_object->set("field_division_code", $division_code);
  $user_object->set("field_legacy_uid", $legacy_user_id);
  $user_object->set("field_first_name", $saml_attribute['firstName'][0]);
  $user_object->set("field_last_name", $saml_attribute['lastName'][0]);
  $user_object->save();
}
