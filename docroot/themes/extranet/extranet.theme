<?php

/**
 * @file
 * Functions to support theming in the extranet theme.
 */

use \Drupal\user\Entity\User;
use \Drupal\file\Entity\File;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function extranet_preprocess_html(array &$variables) {
}

/**
 * Implements hook_page_attachments_alter().
 */
function extranet_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function extranet_preprocess_page(array &$variables) {
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function extranet_theme_suggestions_page_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function extranet_theme_suggestions_node_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_HOOK().
 */
function extranet_preprocess_block(array &$variables) {
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function extranet_theme_suggestions_field_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_node().
 */
function extranet_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function extranet_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function extranet_preprocess_form(array &$variables) {
}

/**
 * Implements hook_preprocess_select().
 */
function extranet_preprocess_select(array &$variables) {
}

/**
 * Implements hook_preprocess_field().
 */
function extranet_preprocess_field(array &$variables, $hook) {
}

/**
 * Implements hook_preprocess_details().
 */
function extranet_preprocess_details(array &$variables) {
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function extranet_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function extranet_preprocess_menu_local_task(array &$variables) {
}

/**
 * Implements hook_preprocess_HOOK().
 */
function extranet_preprocess_menu__account(&$variables) {
  $user = User::load(\Drupal::currentUser()->id());
  $variables['user_id'] = \Drupal::currentUser()->id();
  $userImage = $user->get('user_picture')->target_id;
  $file = File::load($userImage);
  if (!empty($file)) {
    $uri = $file->getFileUri();
    $url = file_create_url($uri);
  }
  else {
    $url = '/themes/extranet/images/default-image.png';
  }
  $variables['user_picture'] = $url;
}

/*
 * Implements hook_preprocess_HOOK().
 */
function extranet_preprocess_search_result(&$variables){
  $variables['type'] = $variables['result']['type'];
  switch($variables['result']['type']){
    case "Page":
      $variables['icon'] = "glyphicon-hdd";
      break;
    default:
      $variables['icon'] = "glyphicon-blackboard";
      break;
  }
  $date = $variables['result']['node']->getChangedTime();
  $variables['date'] = \Drupal::service('date.formatter')->format($date, 'd/m/Y');
}

/*
 * Implements hook_preprocess_HOOK().
 */
function extranet_preprocess_item_list__search_results(&$variables){
  $variables['keys'] = \Drupal::request()->query->get('keys');
}

/*
 * Implements hook_yamlform_submission_html().
 */
function extranet_preprocess_yamlform_submission_html(&$variables) {
  unset($variables['data']['action_links']);
  unset($variables['data']['type']);
  unset($variables['data']['approver_subject']);
  unset($variables['data']['requester_subject']);
}

function extranet_preprocess_file_link(&$variables) {
  $file = $variables['file'];
  $options = array();

  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
  // @todo Wrap in file_url_transform_relative(). This is currently
  // impossible. As a work-around, we currently add the 'url.site' cache context
  // to ensure different file URLs are generated for different sites in a
  // multisite setup, including HTTP and HTTPS versions of the same site.
  // Fix in https://www.drupal.org/node/2646744.
  $url = file_create_url($file_entity->getFileUri());
  $variables['#cache']['contexts'][] = 'url.site';

  $mime_type = $file->getMimeType();
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $file_entity->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file_entity->getFilename();
  }

  // Classes to add to the file field for icons.
  $classes = array(
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, array('/' => '-', '.' => '-')),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  );

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);

  $variables['link'] = Link::fromTextAndUrl($link_text, Url::fromUri($url, $options));
}
