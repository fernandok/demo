diff --git a/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/FixedOffBase.php b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/FixedOffBase.php
new file mode 100644
index 0000000..40fd691
--- /dev/null
+++ b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/FixedOffBase.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer;
+
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Provides the base class for fixed off offers.
+ */
+abstract class FixedOffBase extends PromotionOfferBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'amount' => 0,
+    ] + parent::defaultConfiguration();
+  }
+
+  /**
+   * Gets the fixed amount, as a decimal, negated.
+   *
+   * @return string
+   *   The amount.
+   */
+  public function getAmount() {
+    return (string) $this->configuration['amount'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form += parent::buildConfigurationForm($form, $form_state);
+
+    $form['amount'] = [
+      '#type' => 'commerce_number',
+      '#title' => $this->t('Fixed'),
+      '#default_value' => $this->configuration['amount'],
+      '#maxlength' => 255,
+      '#required' => TRUE,
+      '#min' => 0,
+      '#size' => 5,
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValue($form['#parents']);
+    if (empty($values['amount'])) {
+      $form_state->setError($form, $this->t('Fixed amount cannot be empty.'));
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValue($form['#parents']);
+    $this->configuration['amount'] = (string) ($values['amount']);
+    parent::submitConfigurationForm($form, $form_state);
+  }
+
+}
diff --git a/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/OrderFixedOff.php b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/OrderFixedOff.php
new file mode 100644
index 0000000..12fd8dd
--- /dev/null
+++ b/docroot/modules/contrib/commerce/modules/promotion/src/Plugin/Commerce/PromotionOffer/OrderFixedOff.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace Drupal\commerce_promotion\Plugin\Commerce\PromotionOffer;
+
+use Drupal\commerce_price\Price;
+
+/**
+ * Provides a 'Order: Fixed off' condition.
+ *
+ * @CommercePromotionOffer(
+ *   id = "commerce_promotion_order_fixed_off",
+ *   label = @Translation("Fixed off"),
+ *   target_entity_type = "commerce_order",
+ * )
+ */
+class OrderFixedOff extends FixedOffBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function execute() {
+    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
+    $order = $this->getTargetEntity();
+    $currency_code = $order->getTotalPrice()->getCurrencyCode();
+    $discount_price = new Price($this->getAmount(), $currency_code);
+    $adjustment_amount = $this->rounder->round($discount_price);
+    $this->applyAdjustment($order, $adjustment_amount);
+  }
+
+}
diff --git a/docroot/modules/contrib/commerce/modules/promotion/tests/src/Kernel/PromotionOfferTest.php b/docroot/modules/contrib/commerce/modules/promotion/tests/src/Kernel/PromotionOfferTest.php
index 4e55d6a..fad8152 100644
--- a/docroot/modules/contrib/commerce/modules/promotion/tests/src/Kernel/PromotionOfferTest.php
+++ b/docroot/modules/contrib/commerce/modules/promotion/tests/src/Kernel/PromotionOfferTest.php
@@ -123,6 +123,49 @@ public function testOrderPercentageOff() {
   }
 
   /**
+   * Tests order fixed off.
+   */
+  public function testOrderFixedOff() {
+    // Use addOrderItem so the total is calculated.
+    $order_item = OrderItem::create([
+      'type' => 'test',
+      'quantity' => '2',
+      'unit_price' => [
+        'number' => '20.00',
+        'currency_code' => 'USD',
+      ],
+    ]);
+    $order_item->save();
+    $this->order->addItem($order_item);
+
+    // Starts now, enabled. No end time.
+    $promotion = Promotion::create([
+      'name' => 'Promotion 1',
+      'order_types' => [$this->order->bundle()],
+      'stores' => [$this->store->id()],
+      'status' => TRUE,
+      'offer' => [
+        'target_plugin_id' => 'commerce_promotion_order_fixed_off',
+        'target_plugin_configuration' => [
+          'amount' => '1.0',
+        ],
+      ],
+    ]);
+    $promotion->save();
+
+    /** @var \Drupal\commerce\Plugin\Field\FieldType\PluginItem $offer_field */
+    $offer_field = $promotion->get('offer')->first();
+    $this->assertEquals('1.0', $offer_field->target_plugin_configuration['amount']);
+
+    $promotion->apply($this->order);
+
+    $this->assertEquals(1, count($this->order->getAdjustments()));
+    $this->assertEquals(new Price('39.00', 'USD'), $this->order->getTotalPrice
+    ());
+
+  }
+
+  /**
    * Tests product percentage off.
    */
   public function testProductPercentageOff() {
